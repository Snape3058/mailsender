#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import smtplib                              # process mail
from sys import stdin, argv                 # read from stdin, get command line arguments
from email.mime.text import MIMEText        # process mail content
from getopt import getopt, GetoptError      # parse command line arguments
from getpass import getpass                 # read password from stdin
from json import loads                      # parse config file


version_msg = """
    mailsender version 0.1

"""

usage_msg = """
    mailsender [options] [arguments]
        Read content from stdin and send it in HTML form to the target mail address.

    options:
        -h, --help:
            Print this help message.

        -v, --version:
            Print version information.

        -t <to_address>:
            Set single target mail address.

        --to_list="to_address1[,to_address2 ...]":
            Set a list of target mail addresses, separate with comma.

        -H, --host="mail.host.server":
            Set the mail host server

        -f, --sender="you@your.mail.host.domain":
            Set the sender mail address.

        -u "username", --username="username":
            Set the username to be shown on the mail.

        -p "mailbox login password", --passwd="mailbox login password":
            Set the login password of the sender mailbox.

        -s "mail subject", --subject="mail subject":
            Set the subject of the mail.

        -d, --debug:
            Enable debug output.
            -- ATTENTION: If you enter password from stdin, the password will also be output! --

        -c "config.json", --config="config.json":
            Read from config file and set the value of the variables with it.
            -- ATTENTION: If the variable is also set in the command line argument, the last value will be used! --
"""


class HTML_Mail:

    to_list = []        # target address list
    host = None         # mail host server of sender
    user = None         # login name of the sender on the host server
    username = None     # username to show on the mail
    postfix = None      # postfix of the host server
    passwd = None       # password of the sender account
    subject = None      # subject of the mail
    debug = False       # enable debug output or not (default is disabled)

    def __init__(self):
        pass

    def send_mail(self, content):
        """
        Mail sending process
        If debug mode is on, the mail content will also be output.
        :param content: (string) the content to be sent, should be html format
        :return: (bool) True for successfully sent, False for error.
        """
        if self.debug:
            print ("content", content)
        me = self.username + "<" + self.user + "@" + self.postfix + ">"     # 这里的hello可以任意设置，收到信后，将按>照设置显示
        msg = MIMEText(content, _subtype='html', _charset='utf-8')          # 创建一个实例，这里设置为html格式邮件
        msg['Subject'] = self.subject                                       # 邮件主题
        msg['From'] = me
        msg['To'] = ";".join(self.to_list)
        try:
            s = smtplib.SMTP()
            s.connect(self.host)                            # 连接smtp服务器
            s.login(self.user, self.passwd)                 # 登陆服务器
            s.sendmail(me, self.to_list, msg.as_string())   # 发送邮件
            s.close()
            return True
        except Exception as err:
            print("email error: " + str(err))
            return False

    def check_opt(self):
        """
        Check the options is set correctly or not.
        Raises error and exits when essential variable is not set correctly.
        :return: None
        """
        if not self.passwd:
            self.passwd = getpass()
        if not self.to_list:
            print("target mail address is not set!")
            exit(1)
        if not self.user or not self.postfix:
            print("sender format error or not set!")
            exit(1)
        if not self.host:
            print("host is not set!")
            exit(1)
        if not self.subject:
            print("subject is not set, will leave empty!")
            self.subject = ""
        if not self.username:
            print("username is not set, will use login name!")
            self.username = self.user
        if self.debug:
            self.opt_debug()

    def opt_debug(self):
        """
        Output values of all the variables.
        :return: None
        """
        print("enable debug mode", self.debug)
        print("to_list", self.to_list)
        print("host", self.host)
        print("user", self.user)
        print("username", self.username)
        print("postfix", self.postfix)
        print("passwd", self.passwd)
        print("subject", self.subject)


def file_config(mail_buffer, filename):
    """
    parse json config file and set variables.
    :param mail_buffer: (HTML_Mail reference) set the variables in the given object reference.
    :param filename: (string) config file name
    :return: None
    """
    try:
        json_strs = loads(open(filename, "r").read())
    except IOError as err:                                          # file IO error
        print("file IO error: " + str(err))
        exit(2)
    except ValueError as err:                                       # json parse error
        print("json error: " + str(err))
        exit(1)
    else:
        if json_strs.has_key('to_list'):
            mail_buffer.to_list.extend([str(i) for i in json_strs['to_list']])
        if json_strs.has_key('host'):
            mail_buffer.host = str(json_strs['host'])
        if json_strs.has_key('passwd'):
            mail_buffer.passwd = str(json_strs['passwd'])
        if json_strs.has_key('sender'):
            [mail_buffer.user, mail_buffer.postfix] = str(json_strs['sender']).split('@')
        if json_strs.has_key('subject'):
            mail_buffer.subject = str(json_strs['subject'])
        if json_strs.has_key('username'):
            mail_buffer.username = str(json_strs['username'])


def opt_parse(mail_buffer):
    """
    parse the command line arguments.
    :param mail_buffer: (HTML_Mail reference) set the variables in the given object reference.
    :return: None
    """
    if 1 == len(argv):
        print(usage_msg)
        exit(1)
    try:
        opts, args = getopt(argv[1:], "hvt:H:f:p:s:dc:u:",
                            ["help", "version", "to_list=", "host=", "sender=",
                             "passwd=", "subject=", "debug", "config=", "username="])
    except GetoptError as err:                                              # illegal options, raise error and exit
        print(err)
        print('Use "mailsender -h" for usage.')
        exit(1)
    else:
        for o, a in opts:
            if '-h' == o or '--help' == o:                                  # help output
                print(usage_msg)
                exit(0)
            elif '-v' == o or '--version' == o:                             # version output
                print(version_msg)
                exit(0)
            elif '-t' == o:                                                 # single target address
                mail_buffer.to_list.append(a)
            elif '--to_list' == o:                                          # a list of target address
                mail_buffer.to_list.extend(a.split(','))
            elif '-H' == o or '--host' == o:                                # mail host server of sender
                mail_buffer.host = a
            elif '-f' == o or '--sender' == o:                              # sender mail address -> user and postfix
                [mail_buffer.user, mail_buffer.postfix] = a.split('@')
            elif '-p' == o or '--passwd' == o:                              # password of sender account
                mail_buffer.passwd = a
            elif '-s' == o or '--subject' == o:                             # mail subject
                mail_buffer.subject = a
            elif '-d' == o or '--debug' == o:                               # enable debug mode
                mail_buffer.debug = True
            elif '-u' == o or '--username' == o:                            # username for your address
                mail_buffer.username = a
            elif '-c' == o or '--config' == o:                              # use config file to set variables
                file_config(mail_buffer, a)

if __name__ == '__main__':
    # init objects and parse command line arguments
    mail = HTML_Mail()
    opt_parse(mail)
    mail.check_opt()
    # read content from stdin
    mail_content = ''
    while True:
        line = stdin.readline()
        if not line:
            break
        else:
            mail_content += line
    # send mail
    if mail.send_mail(mail_content):
        print("Mail successfully sent.")


